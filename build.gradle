buildscript {
    repositories {
        mavenCentral()

        maven { url = 'https://files.minecraftforge.net/maven' }
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'


version = '2.1'
group = 'com.nowandfuture.mcef'

archivesBaseName = "mcef-${project.mcversion}"

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

sourceSets {
    api
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        resources {
            srcDir 'src/generated/resources'
        }
    }
    test {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

repositories {
    mavenCentral()
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'snapshot', version: '20210309-1.16.5'
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                mcef {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                mcef {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'mcef', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                mcef {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

test {
    useJUnitPlatform()
}

configurations {
    shade
    compile.extendsFrom(shade)
    //to implement the main module's dependencies
    apiImplementation.extendsFrom(implementation)
    apiRuntimeOnly.extendsFrom(runtimeOnly)
}

dependencies {

    testCompile 'org.junit.jupiter:junit-jupiter:5.7.0'

    implementation 'org.spongepowered:mixin:0.8.3'
    annotationProcessor "org.spongepowered:mixin:0.8.3:processor"

    minecraft 'net.minecraftforge:forge:1.16.5-36.1.0'

    shade "com.squareup.okhttp3:okhttp:4.9.1"
}

task apiJar(type: Jar) {
    archiveClassifier.set 'api'
    from sourceSets.api.output
//
//    from sourceSets.api.allJava
}

task sourcesJar(type: Jar) {
    archiveClassifier.set 'sources'
    from sourceSets.main.allJava
    from sourceSets.api.allJava
}

task deobfJar(type: Jar) {
    archiveClassifier.set 'deobf'
    from sourceSets.main.output
    from sourceSets.api.output
    from configurations.shade.collect { it.isDirectory() ? it : zipTree(it) }

    manifest {
        attributes([
                "Specification-Title"     : "mcefmod",
                "Specification-Vendor"    : "mcef",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "mcef",
                "MixinConnector"          : "com.nowandfuture.mod.mixin.MCEFConnector"
        ])
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    from sourceSets.main.output
    from sourceSets.api.output
    from configurations.shade.collect { it.isDirectory() ? it : zipTree(it) }

    manifest {
        attributes([
                "Specification-Title"     : "mcefmod",
                "Specification-Vendor"    : "mcef",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "mcef",
                "MixinConnector"          : "com.nowandfuture.mod.mixin.MCEFConnector"
        ])
    }

}

mixin {
    add sourceSets.main, "mixins.mcef.refmap.json"
}

artifacts {
    archives apiJar
    archives sourcesJar
    archives deobfJar
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
