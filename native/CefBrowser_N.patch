--- CefBrowser_N---orig.cpp	2020-02-06 18:35:00.948305342 +0000
+++ CefBrowser_N.cpp	2020-02-06 18:24:53.308329234 +0000
@@ -1478,11 +1478,12 @@
   JNI_STATIC_DEFINE_INT(env, cls, KEY_RELEASED);
   JNI_STATIC_DEFINE_INT(env, cls, KEY_TYPED);
 
-  int event_type, modifiers;
+  int event_type, modifiers, key_code;
   char16 key_char;
   if (!CallJNIMethodI_V(env, cls, key_event, "getID", &event_type) ||
       !CallJNIMethodC_V(env, cls, key_event, "getKeyChar", &key_char) ||
-      !CallJNIMethodI_V(env, cls, key_event, "getModifiersEx", &modifiers)) {
+      !CallJNIMethodI_V(env, cls, key_event, "getModifiersEx", &modifiers) ||
+      !CallJNIMethodI_V(env, cls, key_event, "getKeyCode", &key_code)) {
     return;
   }
 
@@ -1491,17 +1492,11 @@
 
 #if defined(OS_WIN)
 
-  jlong scanCode = 0;
-  GetJNIFieldLong(env, cls, key_event, "scancode", &scanCode);
-  BYTE VkCode = LOBYTE(MapVirtualKey(scanCode, MAPVK_VSC_TO_VK));
-  cef_event.native_key_code = (scanCode << 16) |  // key scan code
+  BYTE VkCode = static_cast<BYTE>(key_code);
+   //LOBYTE(MapVirtualKey(key_code, MAPVK_VSC_TO_VK));
+  cef_event.native_key_code = (key_code << 16) |  // key scan code
                               1;                  // key repeat count
 #elif defined(OS_LINUX) || defined(OS_MACOSX)
-  int key_code;
-  if (!CallJNIMethodI_V(env, cls, key_event, "getKeyCode", &key_code)) {
-    return;
-  }
-
   JNI_STATIC_DEFINE_INT(env, cls, VK_BACK_SPACE);
   JNI_STATIC_DEFINE_INT(env, cls, VK_DELETE);
   JNI_STATIC_DEFINE_INT(env, cls, VK_DOWN);
@@ -1513,26 +1508,22 @@
   JNI_STATIC_DEFINE_INT(env, cls, VK_UP);
 
 #if defined(OS_LINUX)
-  if (key_code == JNI_STATIC(VK_BACK_SPACE))
-    cef_event.native_key_code = XK_BackSpace;
-  else if (key_code == JNI_STATIC(VK_DELETE))
-    cef_event.native_key_code = XK_Delete;
-  else if (key_code == JNI_STATIC(VK_DOWN))
-    cef_event.native_key_code = XK_Down;
-  else if (key_code == JNI_STATIC(VK_ENTER))
-    cef_event.native_key_code = XK_Return;
-  else if (key_code == JNI_STATIC(VK_ESCAPE))
-    cef_event.native_key_code = XK_Escape;
-  else if (key_code == JNI_STATIC(VK_LEFT))
-    cef_event.native_key_code = XK_Left;
-  else if (key_code == JNI_STATIC(VK_RIGHT))
-    cef_event.native_key_code = XK_Right;
-  else if (key_code == JNI_STATIC(VK_TAB))
-    cef_event.native_key_code = XK_Tab;
-  else if (key_code == JNI_STATIC(VK_UP))
-    cef_event.native_key_code = XK_Up;
-  else
-    cef_event.native_key_code = key_char;
+  switch(key_code) {
+      case 0x08: cef_event.native_key_code = XK_BackSpace; break;
+      case 0x2E: cef_event.native_key_code = XK_Delete;    break;
+      case 0x28: cef_event.native_key_code = XK_Down;      break;
+      case 0x0D: cef_event.native_key_code = XK_Return;    break;
+      case 0x1B: cef_event.native_key_code = XK_Escape;    break;
+      case 0x25: cef_event.native_key_code = XK_Left;      break;
+      case 0x27: cef_event.native_key_code = XK_Right;     break;
+      case 0x09: cef_event.native_key_code = XK_Tab;       break;
+      case 0x26: cef_event.native_key_code = XK_Up;        break;
+      case 0x21: cef_event.native_key_code = XK_Page_Up;   break;
+      case 0x22: cef_event.native_key_code = XK_Page_Down; break;
+      case 0x23: cef_event.native_key_code = XK_End;       break;
+      case 0x24: cef_event.native_key_code = XK_Home;      break;
+      default:   cef_event.native_key_code = key_char;     break;
+  }
 
   KeyboardCode windows_key_code =
       KeyboardCodeFromXKeysym(cef_event.native_key_code);
